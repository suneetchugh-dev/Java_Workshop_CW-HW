// Download JDK which involves JRE which involves JVM

JDK => JRE => JVM

JVM Includes class loader which is like a librarian which check for class
it does the linking, preparartion, resolution (convert symbolic reference) ==>> intialization

---------------------------------------------------------------
Class loader => is used to load java classes.

//Components of class loader

1- BootStrap Class Loader => Provide Core Java Classes 
#earlier rt.jar was used for connectivity of database and gui which we need to import before java 8 version.   

2- Platform Class Loader => Loads platform specific loader like java.sql and java.GUI.

3- Application Class Loader => It loads user define class.

----------------------------------------------------------------

Memory Area (Run area, Data area)

0- Method Area/ also known as meta area , meta space => stores information about classes
1- Heap Area => Keep All The Object the identifiers are referencing to in memory.
2- Stack Area => Keep All The Identifier 
3- PC Register => Keep Track of parent process 
4- Native method area => Stores states of native method which are writeen in language like C or C++.

----------------------------------------------------------------


Execution Engine=> 
Includes>>

1- Interpreter - a little bit slower
2- JIT -  Just In Time Compiler for fast execution of program by saving previously executed bytecode.
3 - JNI - Java Native Interpreter

----------------------------------------------------------------


//Object reference=>>

An Object reference is a variable that holds the memory address of an object in the heap area, allowing you to access and manipulate that object indirectly.



The main purpose of constructor is to initialise the object.
every java class has an instructor.
a constructor is automatically called at the point of object creation.
a constructor never contain any return type including void
if no constructor is written in a class, java adds a default constructor

we can write a private constructor but according to the rules we cannot access private constructor outside of the class


//Interface => Interface Contain Only Abstract Methods
we use keyword => implements to achieve Interface

Interface Method are by default public + Abstract

Interface variables are by default public + static + Abstract

Interface method must be overwritten inside the implementing class

//Static and Non Static Method=>>

=>>Static Method
A Static method in java is a method belongs to the class rather than a object created using that class;
=>it can be called directly using the class name without creating an object
it can only access static data members and static method directly

=>>Non Static Method
A Non static method is a method that is associated with an object of the class and can only be invoked through the object.




//Use of this and Super Keyword


=>this keyword:
This keyword refers to the current object inside the method or constructor
for ex- it points to same object as of variable reference given => a=10; so like a is pointing to 10 memory address, the this keyword would also point to memory address of 10;

whenever the name of instance and local variable both are same 
then our runtime environment JVM will get confused that which one is local variable and which one is instance variable
=>to avoid this problem we should use this keyword

It is also used when we want to call default constructor of its all class.

it also calls parameterised constructor of it's own class.



=>Super keyword:

a super keyword refers to the object of super class, it is used when we want call the Super class variable, method and constructor through sub class object

1. Note:- whenever the Super class and sub class variable and method name are same then it can be used only;
2. To Avoid the confusion between super class and sub class variable and methods that have same name, we should use Super keyword


=>>Finalized Method()
The Finalised() method in java is called by the garbage collector just before an object is destroyed.
it allow the object to perform a cleanup activity.
Cleanup Activity means closing the resources associated with the object, like database connection, network connection or we can say resource de-allocation

. It is defined in the Object class and available to all Java Classes.
. It is not a reserved keyword
. Called only once per object by the Garbage Collector



=>>Inheritance 

:- When we construct a new class from existing class in such way that the new class acccess all the features and properties of the existing class is called Inheritance.

In java => extends keyword is used to perform inheritance
it provides code re-usability.

We cannot access private member of class using inheritance.

A Sub Class Contain all the features of Super Class, so we should always create object of sub-class
because it have all features of Super Class As Well as it features defined in it's own.

Method overloading is only possible through inheritance.


Syntax:

class a
{

}

class b extends a
{

}


//Types of Inheritance
1: Single Inheritance => Only 1 Super Class And 1 Sub Class [Sub Class Access all the properties of super class]

2: Multi-Level Inheritance => In multi-level inheritance, a class is derived from another derived class, forming a chain.
Example:
class A { }
class B extends A { }
class C extends B { }
Here, C inherits from B, and B inherits from A.

3:Multiple Inheritance => 1 sub class multiple super class
Java Does not support multiple inhertance but it supports with Interface

//Q:How it is implemented using Interface

interface Parent1 {
 void greet();
}
interface Parent2 {
 void greet();
}
class Child implements Parent1, Parent2 {
 public void greet() {
 System.out.println("Hello from Child!");
 }
}


Q:Why Java Does not support multiple inheritance?
=> Java does not support multiple inheritance with classes 
this decision was made to avoid complexity and ambiguity because it sub class extends two super classes then it if both super classes will have same name methods then the sub class would be confused from where it needs to access the method from which super class.



Q:how does python support it?
=>>Python uses the Method Resolution Order (MRO), which follows the C3
Linearization Algorithm. This ensures that methods are resolved in a predictable and conflict free manner, even when multiple parent classes define methods with the same name.

4: Hierachical Inheritance=>>
// In Hierarchical Inheritance, one super class is extended by multiple sub classes.

--or--

In hierarchical inheritance, multiple classes inherit from a single parent clas

//Example 1
class A { }
class B extends A { }
class C extends A { }

//Example 2
class Animal {
    void eat() {
        System.out.println("Animal eats");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("Dog barks");
    }
}

class Cat extends Animal {
    void meow() {
        System.out.println("Cat meows");
    }
}

// Both Dog and Cat inherit from Animal, so they have access



//Access Modifiers=> Provides accessibility of the object in java => Public, Protected, Private
=>Note: If Class or method is not defined with access modifier then by default it's public.

any  private cannot be accessed even with inhertance, means even if you extends from parents class
you would not be able to access the private method

but protected method can be accessed.


=>>Constructor in Inheritance
=> When We Create an object of the child class, Java first call the parent class constructor, then the child class constructor.


A package in Java is a collection of related classes, interfaces, and sub-packages. It is used to organize code, avoid naming conflicts, and provide access protection. Packages help manage large code projects by grouping similar types together. You can create a package using the package keyword at the top of your Java file.


package mypackage;

public class MyClass {
    // your class code
}

//Polymorphism => Same Object but different behaviour.


//compile time polymorphism => A polymorphism which exist that the time of compilation      
we can achieve compile time Polymorphism using method overloading

method overloading => when a class contain more than one method but it's name is same but functionality and parameter taken are different

for ex :- + sign used for addition as well as concatenation


//Runtime Polymorphism
a polymorphism which exists at time of execution of program is called runtime polymorphism

when we write method in super and sub classes in such a way that method name and parameter must be same is called method over-riding


//A Lambda Expression is a short block of code which takes in parameter and returns a value , it is an anonymous function.
Anonymous Function =>
1: Doesn't Have Name
2: Doesn't Have Return Types
3: Doesn't Have Body


//Steps To Make Any Function Into Lambda Expression>>
1: Remove Access Modifier
2: Remove it's return type
3: Remove Method Name
4: Place an arrow =>

()-> {System.out.println("Hello World")}

//Characterstics and properties of lambda Expression
1: If body has one statement then we can remove curly braces
2: Uses type inference, compiler guess the situation or context
3: when we write a lamda expression we don't have to mention datatype of the parameter that is because the java compiler automatically guess the type where the lamda function is being used, this is known as type inference
4: No Return Keyword 
5: if only one parameter remove small bracket
(str) -> str.length();
str -> str.length();


//Benefits of anonymous function=>
to enable functional programming in java
to make code more readable, mantainable and reduced code
to enable parallel processing


//Collection of abstract class is interface
implement keyword is used to use interface


//=> @functional interface

//Array => It is a collection of same type of data, at contiguous memory location

syntax: datatype [size of array] nameofarray
int a[] = {1,2,3,4,5}
length of array = a.length
length-1 = index of last element
//Static array is an array whose size is fixed
//Array Could be of 2 types => 1D array and 2D array



//Package

the classes contained in the package can be used in any program by importing 
package also provide a way for seperate design from code

user defined package, builtin package aka pre-defined package aka API package

Java Packages Examples:-  lang,awt[for gui], util[Scanner classes nextInt Method], IO[buffer reader classes], net[for connections], applet


//creating a user defined package
1: decide name of that package
2: go to this path C:\Program Files\Java\jdk-24\bin
3: create a folder and that would be your package name
4: Inside that folder create your class file which your will import in your main program
5: now you can only import that package from a java file created inside bin folder 


//Exception Handling
=> Exception: An Exception is an unwanted call or unexpected event that interrupt the normal flow of the program during run-time



//what is Exception Handling=>>

In Exception Handling, we should have an alternative source through which we can handle the Exception 


To handle exception we have=>

pre defined exception => try , catch
Finally
Throw and Throws



//Throwable class
1: Exception 2:Error


1:
ArithmeticException
NullPointerException
RuntimeException
IOException
SQLException


2:
Index out of bonds 
stack overflow
IO Error



//Write a java program to search an element in array
//use both linear and binary search



//throw is a keyword in java, used to explicitly throw an exception


//throws => it is used to declare exception that a method might throw, so the caller of the method is informed to handle them.



//Assertion- an assertion is a statement used during testing or debugging to check if something is true
if the condition is false java throws an AssertionError and stops the program



//Localization in Java
=> Localization is the process of adapting a software application to a specific local or region by translating message formatting dates, numbers and currencies according to the local convention.


//String
=> It is a collection or sequence of characters
stored in heap memory area

In Java String are immutable.
String str is pointing to string constant pool.


In java, String is basically an object that represents sequence of characters values and string object are immutable and therefore cannot be modified.

Creating two types of String=>
1: String str = "Hello"  #stored only in string constant pool
2: String str = new String("Hello"); #creates two object on in string constant pool and one outside constant pool in heap area


//String Bufferclass => mutable
String Class Object are immutable and hence their context cannot be modified 
String Bufferclass are mutable and therfore they can be modified. 
moreover the method directly manipulate the data.


//A String builder is same as String Buffer except for it being non syncronized


//A Thread in Java, is smallest unit of execution, it is a lightweight sub process that run independently  

Threads allows multiple tasks to run concurrently using multi-threading by rapidly switching overlapping periods gives illusions of simultaneous execution
used for I/O concurrency

Parallelism is different in this threads are literally ran on different and multiple cores of CPU, they literally cause time reduction to accomplish a computational task.


//We can create threads in 2 ways
1: By Extending Thread Class
2: By Implementing Runnable Class


//Thread that works in background like garbage collector


//Synchronization is a technique in java that make sure only one thread at a time can access external resource

.. The keyword synchronize 

java io input is a collection of classes and string in the java.io package that handles reading data from source 

it provided both byte and character string to support all types of data



*Socket Programming*
=>Socket : collection of IP addresses and port number.


=>A server socket is a network programming construct that allow a server application to listen for an except incoming network connection from client on a specific IP address and port number, it act as a server for a tcp connection endpoint waiting for client to initiate a connection. and once established. it handles the communication by accepting the connection and potentially returning the data to the client.

=> In Client Server architecture is a distibuted network where two types of components which is client and server communicate to provide services and resources.
Client (like a user computer or phone) intiiate request for service such as browsing a web page or setting an email, while services (high performance computer) process this request and perform task and then send back the response.
=>they include requesting and receiving a response, using TCP and UDP protocol
=>socket are created for both client and server..

UDP is connection less oriented protocol 
while TCP is connection oriented protocol


Input Stream and Output Stream


